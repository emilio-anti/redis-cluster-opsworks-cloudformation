AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Resources for a VPC and routing for an Opsworks Stack Redis Cluster
  It includes a VPC with two public subnet and an ACL for the subnets.
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  VPCCidr:
    Type: String
    Description: IPV4 CIDR block for the VPC
    Default: 192.168.1.0/24
    AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}/(\\d{1,2})"
    ConstraintDescription: You must enter a valid CIDR string
  KeyName:
    Description: Name of an existing EC2 key pair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyEC2KeyPair
Resources:
  ############# Network #############
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCidr
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-VPC"
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VPCCidr, 4, 6]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-PublicSubnet1"
    DependsOn: VPC
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VPCCidr, 4, 6]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-PublicSubnet2"
    DependsOn: VPC

  ############# Routing #############
  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-IGW"
    DependsOn: VPC
  IGWAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
    DependsOn: IGW
  PublicRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-PublicRT"
    DependsOn: VPC
  PrivateRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-PrivateRT"
    DependsOn: VPC
  RouteToIGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRT
      GatewayId: !Ref IGW
    DependsOn:
      - PublicRT
      - IGWAttach
  PublicSubnet1RTAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1
    DependsOn:
      - PublicRT
      - PublicSubnet1
  PublicSubnet2RTAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2
    DependsOn:
      - PublicRT
      - PublicSubnet2
  ### Network Access Control Lists ###
  ACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvironmentName}-ACL"
    DependsOn: VPC
  AllowAllInboundTrafic:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref ACL
      CidrBlock: "0.0.0.0/0"
      RuleNumber: 10
      RuleAction: "Allow"
      Egress: false
      Protocol: -1
    DependsOn: ACL
  AllowAllOutboundTrafic:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref ACL
      CidrBlock: "0.0.0.0/0"
      RuleNumber: 10
      RuleAction: "Allow"
      Egress: true
      Protocol: -1
    DependsOn: ACL

########OpsWorks stack #########

  RedisClusterStack:
    Type: AWS::OpsWorks::Stack
    Properties:
      Name: !Ref 'AWS::StackName'
      DefaultOs: Ubuntu 14.04 LTS
      ConfigurationManager:
        Name: Chef
        Version: '12'
      ServiceRoleArn: !GetAtt 'OpsWorksServiceRole.Arn'
      DefaultInstanceProfileArn: !GetAtt 'OpsWorksInstanceProfile.Arn'
      DefaultSshKeyName: !Ref KeyName
      UseCustomCookbooks: true
      CustomCookbooksSource:
        Type: git
        Url: https://github.com/emilio-anti/redis-cluster-opsworks-cookbook.git
      UseOpsworksSecurityGroups: false
      VpcId: !Ref VPC
      DefaultSubnetId: !Ref PublicSubnet1

  RedisMasterLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId: !Ref 'RedisClusterStack'
      Name: redis-master
      Type: custom
      Shortname: redis-master
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      CustomRecipes:
        Deploy:
          - opsworks-redis-cluster::master
      CustomSecurityGroupIds:
        - !Ref 'RedisSecurityGroup'
  RedisSlaveLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId: !Ref 'RedisClusterStack'
      Name: redis-slaves
      Type: custom
      Shortname: redis-slaves
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      CustomRecipes:
        Deploy:
          - opsworks-redis-cluster::slave
      CustomSecurityGroupIds:
        - !Ref 'RedisSecurityGroup'
  RedisMasterInstance:
    Type: AWS::OpsWorks::Instance
    Properties:
      StackId: !Ref 'RedisClusterStack'
      LayerIds:
        - !Ref 'RedisMasterLayer'
      InstanceType: t2.micro
      RootDeviceType: ebs
  RedisSlaveInstance1:
    Type: AWS::OpsWorks::Instance
    Properties:
      StackId: !Ref 'RedisClusterStack'
      LayerIds:
        - !Ref 'RedisSlaveLayer'
      SubnetId: !Ref PublicSubnet1
      InstanceType: t2.micro
      RootDeviceType: ebs
  RedisSlaveInstance2:
    Type: AWS::OpsWorks::Instance
    Properties:
      StackId: !Ref 'RedisClusterStack'
      LayerIds:
        - !Ref 'RedisSlaveLayer'
      SubnetId: !Ref PublicSubnet1
      InstanceType: t2.micro
      RootDeviceType: ebs
  OpsWorksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - opsworks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: opsworks-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - iam:PassRole
                  - cloudwatch:GetMetricStatistics
                  - elasticloadbalancing:*
                Resource: '*'
  OpsWorksInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  OpsWorksInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'OpsWorksInstanceRole'
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable Redis access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '16379'
          ToPort: '16379'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'

########## Outputs ############
Outputs:
  VPC:
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
  StackId:
    Value: !Ref 'RedisClusterStack'
